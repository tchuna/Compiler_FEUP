/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. JavaMM.jj */
/*@egen*/options 
{
    LOOKAHEAD = 1;
    ERROR_REPORTING = true;
}

PARSER_BEGIN(JavaMM)

    import java.io.FileInputStream;

    public class JavaMM/*@bgen(jjtree)*/implements JavaMMTreeConstants/*@egen*/
    {/*@bgen(jjtree)*/
  protected static JJTJavaMMState jjtree = new JJTJavaMMState();

/*@egen*/
        public static void main(String[] args) throws Exception
        {
            if(args.length < 1)
            {
                System.out.println("Usage: JavaMM <filename>");
                System.exit(1);
            }

            JavaMM parser = new JavaMM(new FileInputStream(args[0]));
            SimpleNode root = parser.Program();

            System.out.println("-----AST-----");
            root.dump(" ");
            
        }
    }

PARSER_END(JavaMM)

SKIP :
{
    " " 
    | "\r" 
    | "\t"
    | "\n"
    | <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
    | <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

TOKEN:
{
    
    <BOOL: "boolean">
    | <MAIN: "main">
    | <VOID: "void">
    | <STRING: "String">
    | <INT: ("int")>
    | <LPAREN: "(">
    | <RPAREN: ")">
    | <LBRACK: "[">
    | <RBRACK: "]">
    | <LBRACE: "{">
    | <RBRACE: "}">
    | <ADD: "+">
    | <SUB: "-">
    | <MUL: "*">
    | <DIV: "/">
    | <NOT: "!">
    | <EQUAL: "=">
    | <LOWER: "<">
    | <BIGGER: ">">
    | <AND: "&&">
    | <SEMI: ";">
    | <COMMA: ",">
    | <DOT: ".">
    | <RETURN: "return">
    | <PUBLIC: "public">
    | <STAT: "static">
    | <TRUE: "true">
    | <FALSE: "false">
    | <THIS: "this">
    | <NEW: "new">
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <CLASS: "class">
    | <EXT: "extends">
    | <LENGTH: "length">
    | <LITERAL: (<INTEGER> | <BINARY> | <HEX> | <OCTAL>)>
    | <OCTAL: "0"(["0"-"7"])+>
    | <HEX: "0x"(["0"-"9", "A"-"F"])+>
    | <BINARY: "0b"(["0"-"1"])+>
    | <INTEGER: (<DIGIT>)+>
    | <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
    | <LETTER: ["$", "a"-"z", "A"-"Z", "_"]>
    | <DIGIT: ["0"-"9"]>
}

SimpleNode Program(): {/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Program */
    try {
/*@egen*/
    ClassDeclaration() <EOF>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ClassDeclaration()       : {/*@bgen(jjtree) Class */
                                 SimpleNode jjtn000 = new SimpleNode(JJTCLASS);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token n;}
{/*@bgen(jjtree) Class */
    try {
/*@egen*/
    <CLASS>  n=<IDENTIFIER> {jjtn000.name = n.image;} [Extends()] 
    <LBRACE> (VarDeclaration())* (<PUBLIC> (MainDeclaration() | Method()))* <RBRACE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Extends(): {/*@bgen(jjtree) Extends */
                 SimpleNode jjtn000 = new SimpleNode(JJTEXTENDS);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token n;}
{/*@bgen(jjtree) Extends */
    try {
/*@egen*/
    <EXT> n=<IDENTIFIER>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {jjtn000.name = n.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VarDeclaration()     : {/*@bgen(jjtree) Var */
                             SimpleNode jjtn000 = new SimpleNode(JJTVAR);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token n; String t;}
{/*@bgen(jjtree) Var */
    try {
/*@egen*/
    t=Type() {jjtn000.type = t;} n=<IDENTIFIER> {jjtn000.name = n.image;} <SEMI>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/  
}

void MainDeclaration()      : {/*@bgen(jjtree) Main */
                               SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token n, t;}
{/*@bgen(jjtree) Main */
    try {
/*@egen*/
    <STAT> <VOID> n=<MAIN> {jjtn000.name = n.image;} <LPAREN> <STRING> <LBRACK> <RBRACK> 
    t=<IDENTIFIER> {jjtn000.type = t.image;} <RPAREN> 
    <LBRACE>  (LOOKAHEAD(2) VarDeclaration())* (Statement())* <RBRACE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/  
}

void Method(): {/*@bgen(jjtree) Method */
                SimpleNode jjtn000 = new SimpleNode(JJTMETHOD);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token n; String r;}
{/*@bgen(jjtree) Method */
    try {
/*@egen*/
    r=Type() {jjtn000.returnType = r;} n=<IDENTIFIER> {jjtn000.name = n.image;} <LPAREN> [Arg() 
    (<COMMA> Arg())*] <RPAREN> <LBRACE> (LOOKAHEAD(2) VarDeclaration())* (Statement())*
    Return() <SEMI> <RBRACE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Return(): {/*@bgen(jjtree) Return */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Return */
    try {
/*@egen*/
    <RETURN> Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void Arg(): {/*@bgen(jjtree) Arg */
             SimpleNode jjtn000 = new SimpleNode(JJTARG);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Token n; String t;}
{/*@bgen(jjtree) Arg */
    try {
/*@egen*/
    t=Type() {jjtn000.type = t;} n=<IDENTIFIER>/*@bgen(jjtree)*/
                                                {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtc000 = false;
                                                }
/*@egen*/ {jjtn000.name = n.image;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Type()      : {Token t, t1;}
{
    t=<INT> [<LBRACK> t1=<RBRACK> {return "int[]";}] {return t.image;}
    | t=<BOOL> {return t.image;}
    | t=<IDENTIFIER> {return t.image;}
}

void Statement()      : {}
{
    <LBRACE> (Statement())* <RBRACE>
    | While()
    | If()
    | Stmt()
}

void Stmt()      : {}
{
    /*
    LOOKAHEAD(2) lhs() <EQUAL> Expression() <SEMI> #EQUALS(2)
    | Expression() <SEMI> */

    lhs() [<EQUAL>/*@bgen(jjtree) #EQUALS( 2) */
                   {
                     SimpleNode jjtn001 = new SimpleNode(JJTEQUALS);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
                   } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       throw (RuntimeException)jjte001;
                     }
                     if (jjte001 instanceof ParseException) {
                       throw (ParseException)jjte001;
                     }
                     throw (Error)jjte001;
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                     }
                   }
/*@egen*/           ] <SEMI>
    | Expression_NO_ID() <SEMI> 
}

void lhs()      : {/*@bgen(jjtree) TERM */
                   SimpleNode jjtn000 = new SimpleNode(JJTTERM);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token n;}
{/*@bgen(jjtree) TERM */
    try {
/*@egen*/
    n=<IDENTIFIER> {jjtn000.name = n.image;} [ArrayAccs() | Member()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void While(): {/*@bgen(jjtree) While */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) While */
    try {
/*@egen*/
    try
    {
        <WHILE> <LPAREN> Expression() <RPAREN> 
    }
    catch(ParseException e)
    {
        System.out.println(e.toString());

        error_skip_to(RPAREN);
    }

    Then()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void If(): {/*@bgen(jjtree) If */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) If */
    try {
/*@egen*/
    <IF> <LPAREN> Expression() <RPAREN> Then() Else()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Else(): {/*@bgen(jjtree) Else */
  SimpleNode jjtn000 = new SimpleNode(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Else */
    try {
/*@egen*/
    <ELSE> Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Then(): {/*@bgen(jjtree) Then */
  SimpleNode jjtn000 = new SimpleNode(JJTTHEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Then */
    try {
/*@egen*/
    Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Member(): {/*@bgen(jjtree) Member */
                SimpleNode jjtn000 = new SimpleNode(JJTMEMBER);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token n;}
{/*@bgen(jjtree) Member */
    try {
/*@egen*/
    <DOT> 
    (n=<LENGTH>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.name = n.image;} | 
    n=<IDENTIFIER> {jjtn000.name = n.image;} <LPAREN> [Expression() (<COMMA> Expression())*] <RPAREN>)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ArrayAccs(): {/*@bgen(jjtree) ArrayAccs */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYACCS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayAccs */
    try {
/*@egen*/
    <LBRACK> Expression() <RBRACK>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expression()      : {}
{
    EXPR() //As explained in Moodle, arrays in Java-- are only int arrays, thus having no members
}

void Expression_NO_ID()      : {}
{
    EXPR_NO_ID()
}

void EXPR()       : {}
{
    EXPR_2() (<AND>/*@bgen(jjtree) #AND( 2) */
                    {
                      SimpleNode jjtn001 = new SimpleNode(JJTAND);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*/ EXPR_2()/*@bgen(jjtree)*/
                    } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        throw (RuntimeException)jjte001;
                      }
                      if (jjte001 instanceof ParseException) {
                        throw (ParseException)jjte001;
                      }
                      throw (Error)jjte001;
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                      }
                    }
/*@egen*/        )*   
}

void EXPR_NO_ID()      : {}
{
    EXPR_2_NO_ID() (<AND>/*@bgen(jjtree) #AND( 2) */
                          {
                            SimpleNode jjtn001 = new SimpleNode(JJTAND);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*/ EXPR_2_NO_ID()/*@bgen(jjtree)*/
                          } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              throw (RuntimeException)jjte001;
                            }
                            if (jjte001 instanceof ParseException) {
                              throw (ParseException)jjte001;
                            }
                            throw (Error)jjte001;
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
                            }
                          }
/*@egen*/        )*
}

void EXPR_2()       : {}
{
    EXPR_3() (<LOWER>/*@bgen(jjtree) #LOWER( 2) */
                      {
                        SimpleNode jjtn001 = new SimpleNode(JJTLOWER);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                      }
                      try {
/*@egen*/ EXPR_3()/*@bgen(jjtree)*/
                      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          throw (RuntimeException)jjte001;
                        }
                        if (jjte001 instanceof ParseException) {
                          throw (ParseException)jjte001;
                        }
                        throw (Error)jjte001;
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
                      }
/*@egen*/          )* 
}

void EXPR_2_NO_ID()       : {}
{
    EXPR_3_NO_ID() (<LOWER>/*@bgen(jjtree) #LOWER( 2) */
                            {
                              SimpleNode jjtn001 = new SimpleNode(JJTLOWER);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*/ EXPR_3_NO_ID()/*@bgen(jjtree)*/
                            } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                throw (RuntimeException)jjte001;
                              }
                              if (jjte001 instanceof ParseException) {
                                throw (ParseException)jjte001;
                              }
                              throw (Error)jjte001;
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
                            }
/*@egen*/          )* 
} 

void EXPR_3()       : {}
{
    EXPR_4() (ADDSUB())*
}

void EXPR_3_NO_ID()       : {}
{
    EXPR_4_NO_ID() (ADDSUB_NO_ID())*
}

void ADDSUB()      : {}
{
    <ADD>/*@bgen(jjtree) #ADD( 2) */
          {
            SimpleNode jjtn001 = new SimpleNode(JJTADD);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ EXPR_4()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
          }
/*@egen*/        
    | <SUB>/*@bgen(jjtree) #SUB( 2) */
            {
              SimpleNode jjtn002 = new SimpleNode(JJTSUB);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*/ EXPR_4()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
            }
/*@egen*/        
}

void ADDSUB_NO_ID()      : {}
{
    <ADD>/*@bgen(jjtree) #ADD( 2) */
          {
            SimpleNode jjtn001 = new SimpleNode(JJTADD);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ EXPR_4_NO_ID()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
          }
/*@egen*/        
    | <SUB>/*@bgen(jjtree) #SUB( 2) */
            {
              SimpleNode jjtn002 = new SimpleNode(JJTSUB);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*/ EXPR_4_NO_ID()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
            }
/*@egen*/        
}

void EXPR_4()      : {}
{
    EXPR_5() (MULDIV())*
}

void EXPR_4_NO_ID()      : {}
{
    EXPR_5_NO_ID() (MULDIV_NO_ID())*
}

void MULDIV()      : {}
{
    <MUL>/*@bgen(jjtree) #MUL( 2) */
          {
            SimpleNode jjtn001 = new SimpleNode(JJTMUL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ EXPR_5()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
          }
/*@egen*/        
    | <DIV>/*@bgen(jjtree) #DIV( 2) */
            {
              SimpleNode jjtn002 = new SimpleNode(JJTDIV);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*/ EXPR_5()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
            }
/*@egen*/        
}

void MULDIV_NO_ID()      : {}
{
    <MUL>/*@bgen(jjtree) #MUL( 2) */
          {
            SimpleNode jjtn001 = new SimpleNode(JJTMUL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ EXPR_5_NO_ID()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
          }
/*@egen*/        
    | <DIV>/*@bgen(jjtree) #DIV( 2) */
            {
              SimpleNode jjtn002 = new SimpleNode(JJTDIV);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*/ EXPR_5_NO_ID()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
            }
/*@egen*/        
}

void EXPR_5()      : {}
{
    EXPR_6()
    | <NOT>/*@bgen(jjtree) #NOT( 1) */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTNOT);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ EXPR_6()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  1);
              }
            }
/*@egen*/        
}

void EXPR_5_NO_ID()      : {}
{
    EXPR_6_NO_ID()
    | <NOT>/*@bgen(jjtree) #NOT( 1) */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTNOT);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ EXPR_6_NO_ID()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  1);
              }
            }
/*@egen*/        
}

void EXPR_6()      : {/*@bgen(jjtree) TERM */
                      SimpleNode jjtn000 = new SimpleNode(JJTTERM);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, n; Boolean b = false;}
{/*@bgen(jjtree) TERM */
    try {
/*@egen*/
    ([<SUB> {b = true;}] t=<LITERAL> {jjtn000.name = t.image; if(b) jjtn000.name = "-" + jjtn000.name;}
    | t=<THIS> {jjtn000.name = t.image;} 
    | t=<TRUE> {jjtn000.name = t.image;}
    | t=<FALSE> {jjtn000.name = t.image;}
    | t=<IDENTIFIER> {jjtn000.name = t.image;}
    | <LPAREN>/*@bgen(jjtree) ENCLOSED_EXPR */
               {
                 SimpleNode jjtn001 = new SimpleNode(JJTENCLOSED_EXPR);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
               }
/*@egen*/                <RPAREN>
    | NEW())
    [EXPR_7()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void EXPR_6_NO_ID()      : {/*@bgen(jjtree) TERM */
                            SimpleNode jjtn000 = new SimpleNode(JJTTERM);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, n; Boolean b = false;}
{/*@bgen(jjtree) TERM */
    try {
/*@egen*/
    ([<SUB> {b = true;}] t=<LITERAL> {jjtn000.name = t.image; if(b) jjtn000.name = "-" + jjtn000.name;}
    | t=<THIS> {jjtn000.name = t.image;} 
    | t=<TRUE> {jjtn000.name = t.image;}
    | t=<FALSE> {jjtn000.name = t.image;}
    | <LPAREN>/*@bgen(jjtree) ENCLOSED_EXPR */
               {
                 SimpleNode jjtn001 = new SimpleNode(JJTENCLOSED_EXPR);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
               }
/*@egen*/                <RPAREN>
    | NEW())
    [EXPR_7()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void EXPR_7()      : {}
{
    ArrayAccs() 
    | Member()
}

void NEW(): {/*@bgen(jjtree) NEW */
             SimpleNode jjtn000 = new SimpleNode(JJTNEW);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Token n;}
{/*@bgen(jjtree) NEW */
    try {
/*@egen*/
    <NEW> (n=<IDENTIFIER> {jjtn000.type = n.image;} <LPAREN> <RPAREN> 
        | n=<INT> {jjtn000.type = "int[]";} ArrayAccs())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

JAVACODE
void error_skip_to(int kind)      
{
    Token t;

    do 
    {
      t = getNextToken();
    } 
    while (t.kind != kind);
}