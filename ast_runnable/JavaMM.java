/* JavaMM.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. JavaMM.java */
    import java.io.FileInputStream;

    public class JavaMM/*@bgen(jjtree)*/implements JavaMMTreeConstants, JavaMMConstants {/*@bgen(jjtree)*/
  protected static JJTJavaMMState jjtree = new JJTJavaMMState();public static void main(String[] args) throws Exception
        {
            if(args.length < 1)
            {
                System.out.println("Usage: JavaMM <filename>");
                System.exit(1);
            }

            JavaMM parser = new JavaMM(new FileInputStream(args[0]));
            SimpleNode root = parser.Program();

            System.out.println("-----AST-----");
            root.dump(" ");

        }

  static final public SimpleNode Program() throws ParseException {/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ClassDeclaration();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ClassDeclaration() throws ParseException {/*@bgen(jjtree) Class */
                                 SimpleNode jjtn000 = new SimpleNode(JJTCLASS);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);Token n;
    try {
      jj_consume_token(CLASS);
      n = jj_consume_token(IDENTIFIER);
jjtn000.name = n.image;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXT:{
        Extends();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOL:
        case INT:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        VarDeclaration();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(PUBLIC);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STAT:{
          MainDeclaration();
          break;
          }
        case BOOL:
        case INT:
        case IDENTIFIER:{
          Method();
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Extends() throws ParseException {/*@bgen(jjtree) Extends */
                 SimpleNode jjtn000 = new SimpleNode(JJTEXTENDS);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token n;
    try {
      jj_consume_token(EXT);
      n = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
jjtn000.name = n.image;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void VarDeclaration() throws ParseException {/*@bgen(jjtree) Var */
                             SimpleNode jjtn000 = new SimpleNode(JJTVAR);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token n; String t;
    try {
      t = Type();
jjtn000.type = t;
      n = jj_consume_token(IDENTIFIER);
jjtn000.name = n.image;
      jj_consume_token(SEMI);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void MainDeclaration() throws ParseException {/*@bgen(jjtree) Main */
                               SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token n, t;
    try {
      jj_consume_token(STAT);
      jj_consume_token(VOID);
      n = jj_consume_token(MAIN);
jjtn000.name = n.image;
      jj_consume_token(LPAREN);
      jj_consume_token(STRING);
      jj_consume_token(LBRACK);
      jj_consume_token(RBRACK);
      t = jj_consume_token(IDENTIFIER);
jjtn000.type = t.image;
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      label_3:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_3;
        }
        VarDeclaration();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:
        case LBRACE:
        case SUB:
        case NOT:
        case TRUE:
        case FALSE:
        case THIS:
        case NEW:
        case IF:
        case WHILE:
        case LITERAL:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        Statement();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Method() throws ParseException {/*@bgen(jjtree) Method */
                SimpleNode jjtn000 = new SimpleNode(JJTMETHOD);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token n; String r;
    try {
      r = Type();
jjtn000.returnType = r;
      n = jj_consume_token(IDENTIFIER);
jjtn000.name = n.image;
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOL:
      case INT:
      case IDENTIFIER:{
        Arg();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          Arg();
        }
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      label_6:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_6;
        }
        VarDeclaration();
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:
        case LBRACE:
        case SUB:
        case NOT:
        case TRUE:
        case FALSE:
        case THIS:
        case NEW:
        case IF:
        case WHILE:
        case LITERAL:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_7;
        }
        Statement();
      }
      Return();
      jj_consume_token(SEMI);
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Return() throws ParseException {/*@bgen(jjtree) Return */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      Expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Arg() throws ParseException {/*@bgen(jjtree) Arg */
             SimpleNode jjtn000 = new SimpleNode(JJTARG);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);Token n; String t;
    try {
      t = Type();
jjtn000.type = t;
      n = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                                                  jjtc000 = false;
jjtn000.name = n.image;
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public String Type() throws ParseException {Token t, t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      t = jj_consume_token(INT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACK:{
        jj_consume_token(LBRACK);
        t1 = jj_consume_token(RBRACK);
{if ("" != null) return "int[]";}
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
{if ("" != null) return t.image;}
      break;
      }
    case BOOL:{
      t = jj_consume_token(BOOL);
{if ("" != null) return t.image;}
      break;
      }
    case IDENTIFIER:{
      t = jj_consume_token(IDENTIFIER);
{if ("" != null) return t.image;}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      jj_consume_token(LBRACE);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:
        case LBRACE:
        case SUB:
        case NOT:
        case TRUE:
        case FALSE:
        case THIS:
        case NEW:
        case IF:
        case WHILE:
        case LITERAL:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_8;
        }
        Statement();
      }
      jj_consume_token(RBRACE);
      break;
      }
    case WHILE:{
      While();
      break;
      }
    case IF:{
      If();
      break;
      }
    case LPAREN:
    case SUB:
    case NOT:
    case TRUE:
    case FALSE:
    case THIS:
    case NEW:
    case LITERAL:
    case IDENTIFIER:{
      Stmt();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      lhs();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:{
        jj_consume_token(EQUAL);
SimpleNode jjtn001 = new SimpleNode(JJTEQUALS);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
        try {
          Expression();
        } catch (Throwable jjte001) {
if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte001;}
                     }
                     if (jjte001 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte001;}
                     }
                     {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                     }
        }
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(SEMI);
      break;
      }
    case LPAREN:
    case SUB:
    case NOT:
    case TRUE:
    case FALSE:
    case THIS:
    case NEW:
    case LITERAL:{
      Expression_NO_ID();
      jj_consume_token(SEMI);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void lhs() throws ParseException {/*@bgen(jjtree) TERM */
                   SimpleNode jjtn000 = new SimpleNode(JJTTERM);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token n;
    try {
      n = jj_consume_token(IDENTIFIER);
jjtn000.name = n.image;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACK:
      case DOT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACK:{
          ArrayAccs();
          break;
          }
        case DOT:{
          Member();
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void While() throws ParseException {/*@bgen(jjtree) While */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
      } catch (ParseException e) {
System.out.println(e.toString());

        error_skip_to(RPAREN);
      }
      Then();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void If() throws ParseException {/*@bgen(jjtree) If */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Then();
      Else();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Else() throws ParseException {/*@bgen(jjtree) Else */
  SimpleNode jjtn000 = new SimpleNode(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ELSE);
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Then() throws ParseException {/*@bgen(jjtree) Then */
  SimpleNode jjtn000 = new SimpleNode(JJTTHEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Member() throws ParseException {/*@bgen(jjtree) Member */
                SimpleNode jjtn000 = new SimpleNode(JJTMEMBER);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token n;
    try {
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LENGTH:{
        n = jj_consume_token(LENGTH);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
jjtn000.name = n.image;
        break;
        }
      case IDENTIFIER:{
        n = jj_consume_token(IDENTIFIER);
jjtn000.name = n.image;
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:
        case SUB:
        case NOT:
        case TRUE:
        case FALSE:
        case THIS:
        case NEW:
        case LITERAL:
        case IDENTIFIER:{
          Expression();
          label_9:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[16] = jj_gen;
              break label_9;
            }
            jj_consume_token(COMMA);
            Expression();
          }
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ArrayAccs() throws ParseException {/*@bgen(jjtree) ArrayAccs */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYACCS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACK);
      Expression();
      jj_consume_token(RBRACK);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Expression() throws ParseException {
    EXPR();
  }

  static final public void Expression_NO_ID() throws ParseException {
    EXPR_NO_ID();
  }

  static final public void EXPR() throws ParseException {
    EXPR_2();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_10;
      }
      jj_consume_token(AND);
SimpleNode jjtn001 = new SimpleNode(JJTAND);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
      try {
        EXPR_2();
      } catch (Throwable jjte001) {
if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte001;}
                      }
                      if (jjte001 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte001;}
                      }
                      {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                      }
      }
    }
  }

  static final public void EXPR_NO_ID() throws ParseException {
    EXPR_2_NO_ID();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_11;
      }
      jj_consume_token(AND);
SimpleNode jjtn001 = new SimpleNode(JJTAND);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
      try {
        EXPR_2_NO_ID();
      } catch (Throwable jjte001) {
if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte001;}
                            }
                            if (jjte001 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte001;}
                            }
                            {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
                            }
      }
    }
  }

  static final public void EXPR_2() throws ParseException {
    EXPR_3();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LOWER:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_12;
      }
      jj_consume_token(LOWER);
SimpleNode jjtn001 = new SimpleNode(JJTLOWER);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
      try {
        EXPR_3();
      } catch (Throwable jjte001) {
if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte001;}
                        }
                        if (jjte001 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte001;}
                        }
                        {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
      }
    }
  }

  static final public void EXPR_2_NO_ID() throws ParseException {
    EXPR_3_NO_ID();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LOWER:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_13;
      }
      jj_consume_token(LOWER);
SimpleNode jjtn001 = new SimpleNode(JJTLOWER);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
      try {
        EXPR_3_NO_ID();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte001;}
                              }
                              if (jjte001 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte001;}
                              }
                              {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
      }
    }
  }

  static final public void EXPR_3() throws ParseException {
    EXPR_4();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD:
      case SUB:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_14;
      }
      ADDSUB();
    }
  }

  static final public void EXPR_3_NO_ID() throws ParseException {
    EXPR_4_NO_ID();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD:
      case SUB:{
        ;
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        break label_15;
      }
      ADDSUB_NO_ID();
    }
  }

  static final public void ADDSUB() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ADD:{
      jj_consume_token(ADD);
SimpleNode jjtn001 = new SimpleNode(JJTADD);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        EXPR_4();
      } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
      }
      break;
      }
    case SUB:{
      jj_consume_token(SUB);
SimpleNode jjtn002 = new SimpleNode(JJTSUB);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
      try {
        EXPR_4();
      } catch (Throwable jjte002) {
if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte002;}
              }
              if (jjte002 instanceof ParseException) {
                {if (true) throw (ParseException)jjte002;}
              }
              {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
      }
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ADDSUB_NO_ID() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ADD:{
      jj_consume_token(ADD);
SimpleNode jjtn001 = new SimpleNode(JJTADD);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        EXPR_4_NO_ID();
      } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
      }
      break;
      }
    case SUB:{
      jj_consume_token(SUB);
SimpleNode jjtn002 = new SimpleNode(JJTSUB);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
      try {
        EXPR_4_NO_ID();
      } catch (Throwable jjte002) {
if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte002;}
              }
              if (jjte002 instanceof ParseException) {
                {if (true) throw (ParseException)jjte002;}
              }
              {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
      }
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void EXPR_4() throws ParseException {
    EXPR_5();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        break label_16;
      }
      MULDIV();
    }
  }

  static final public void EXPR_4_NO_ID() throws ParseException {
    EXPR_5_NO_ID();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        break label_17;
      }
      MULDIV_NO_ID();
    }
  }

  static final public void MULDIV() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MUL:{
      jj_consume_token(MUL);
SimpleNode jjtn001 = new SimpleNode(JJTMUL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        EXPR_5();
      } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
      }
      break;
      }
    case DIV:{
      jj_consume_token(DIV);
SimpleNode jjtn002 = new SimpleNode(JJTDIV);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
      try {
        EXPR_5();
      } catch (Throwable jjte002) {
if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte002;}
              }
              if (jjte002 instanceof ParseException) {
                {if (true) throw (ParseException)jjte002;}
              }
              {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
      }
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void MULDIV_NO_ID() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MUL:{
      jj_consume_token(MUL);
SimpleNode jjtn001 = new SimpleNode(JJTMUL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        EXPR_5_NO_ID();
      } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
      }
      break;
      }
    case DIV:{
      jj_consume_token(DIV);
SimpleNode jjtn002 = new SimpleNode(JJTDIV);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
      try {
        EXPR_5_NO_ID();
      } catch (Throwable jjte002) {
if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte002;}
              }
              if (jjte002 instanceof ParseException) {
                {if (true) throw (ParseException)jjte002;}
              }
              {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
      }
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void EXPR_5() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:
    case SUB:
    case TRUE:
    case FALSE:
    case THIS:
    case NEW:
    case LITERAL:
    case IDENTIFIER:{
      EXPR_6();
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
SimpleNode jjtn001 = new SimpleNode(JJTNOT);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        EXPR_6();
      } catch (Throwable jjte001) {
if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  1);
              }
      }
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void EXPR_5_NO_ID() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:
    case SUB:
    case TRUE:
    case FALSE:
    case THIS:
    case NEW:
    case LITERAL:{
      EXPR_6_NO_ID();
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
SimpleNode jjtn001 = new SimpleNode(JJTNOT);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        EXPR_6_NO_ID();
      } catch (Throwable jjte001) {
if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  1);
              }
      }
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void EXPR_6() throws ParseException {/*@bgen(jjtree) TERM */
                      SimpleNode jjtn000 = new SimpleNode(JJTTERM);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t, n; Boolean b = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUB:
      case LITERAL:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SUB:{
          jj_consume_token(SUB);
b = true;
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        t = jj_consume_token(LITERAL);
jjtn000.name = t.image; if(b) jjtn000.name = "-" + jjtn000.name;
        break;
        }
      case THIS:{
        t = jj_consume_token(THIS);
jjtn000.name = t.image;
        break;
        }
      case TRUE:{
        t = jj_consume_token(TRUE);
jjtn000.name = t.image;
        break;
        }
      case FALSE:{
        t = jj_consume_token(FALSE);
jjtn000.name = t.image;
        break;
        }
      case IDENTIFIER:{
        t = jj_consume_token(IDENTIFIER);
jjtn000.name = t.image;
        break;
        }
      case LPAREN:{
        jj_consume_token(LPAREN);
SimpleNode jjtn001 = new SimpleNode(JJTENCLOSED_EXPR);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
        try {
          Expression();
        } catch (Throwable jjte001) {
if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte001;}
                 }
                 if (jjte001 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte001;}
                 }
                 {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
        }
        jj_consume_token(RPAREN);
        break;
        }
      case NEW:{
        NEW();
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACK:
      case DOT:{
        EXPR_7();
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void EXPR_6_NO_ID() throws ParseException {/*@bgen(jjtree) TERM */
                            SimpleNode jjtn000 = new SimpleNode(JJTTERM);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t, n; Boolean b = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUB:
      case LITERAL:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SUB:{
          jj_consume_token(SUB);
b = true;
          break;
          }
        default:
          jj_la1[36] = jj_gen;
          ;
        }
        t = jj_consume_token(LITERAL);
jjtn000.name = t.image; if(b) jjtn000.name = "-" + jjtn000.name;
        break;
        }
      case THIS:{
        t = jj_consume_token(THIS);
jjtn000.name = t.image;
        break;
        }
      case TRUE:{
        t = jj_consume_token(TRUE);
jjtn000.name = t.image;
        break;
        }
      case FALSE:{
        t = jj_consume_token(FALSE);
jjtn000.name = t.image;
        break;
        }
      case LPAREN:{
        jj_consume_token(LPAREN);
SimpleNode jjtn001 = new SimpleNode(JJTENCLOSED_EXPR);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
        try {
          Expression();
        } catch (Throwable jjte001) {
if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte001;}
                 }
                 if (jjte001 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte001;}
                 }
                 {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
        }
        jj_consume_token(RPAREN);
        break;
        }
      case NEW:{
        NEW();
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACK:
      case DOT:{
        EXPR_7();
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void EXPR_7() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACK:{
      ArrayAccs();
      break;
      }
    case DOT:{
      Member();
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void NEW() throws ParseException {/*@bgen(jjtree) NEW */
             SimpleNode jjtn000 = new SimpleNode(JJTNEW);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);Token n;
    try {
      jj_consume_token(NEW);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        n = jj_consume_token(IDENTIFIER);
jjtn000.type = n.image;
        jj_consume_token(LPAREN);
        jj_consume_token(RPAREN);
        break;
        }
      case INT:{
        n = jj_consume_token(INT);
jjtn000.type = "int[]";
        ArrayAccs();
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static void error_skip_to(int kind) throws ParseException {Token t;

    do
    {
      t = getNextToken();
    }
    while (t.kind != kind);
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    if (jj_scan_token(LBRACK)) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_18()
 {
    if (jj_3R_19()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (jj_scan_token(INT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JavaMMTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[41];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x880,0x80000000,0x880,0x491000,0x10000000,0x880,0x491000,0x4000,0x880,0x491000,0x491000,0x800000,0x481000,0x20004000,0x20004000,0x10000000,0x481000,0x0,0x4000000,0x4000000,0x1000000,0x1000000,0xc0000,0xc0000,0xc0000,0xc0000,0x300000,0x300000,0x300000,0x300000,0x481000,0x481000,0x80000,0x81000,0x20004000,0x80000,0x81000,0x20004000,0x20004000,0x800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x200,0x10000,0x0,0x10001,0x108be,0x0,0x10000,0x108be,0x0,0x10000,0x108be,0x108be,0x0,0x1081e,0x0,0x0,0x0,0x1081e,0x10400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1081e,0x81e,0x0,0x1081e,0x0,0x0,0x81e,0x0,0x0,0x10000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JavaMM(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JavaMM(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JavaMMTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JavaMM(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JavaMMTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JavaMM(JavaMMTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JavaMMTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 41; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

    }
